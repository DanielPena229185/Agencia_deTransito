/**
 * PrincipalForm.java
 * 25 mar. 2023 14:12:20
 */
package org.itson.presentacion;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import org.itson.dominio.Costo;
import org.itson.dominio.CostoLicencia;
import org.itson.dominio.CostoPlaca;
import org.itson.dominio.Persona;
import org.itson.dominio.TipoVehiculo;
import org.itson.servicio.CostoServicio;
import org.itson.servicio.PersonaServicio;

/**
 * Descripción de la clase: Esta clase se encarga de mostrar el formulario para
 * principal
 *
 * @author Daniel Armando Peña Garcia ID:229185
 * @author Daniel Omar Alameda López ID: 228343
 */
public class PrincipalForm extends javax.swing.JFrame {

    private PersonaServicio personaDAO;
    private CostoServicio costoDAO;

    /**
     *
     * Crea una instancia de la clase PrincipalForm. Inicializa los componentes
     * de la ventana y crea objetos de servicio de Persona y Costo. Configura
     * los valores iniciales de la ventana.
     */
    public PrincipalForm() {
        initComponents();
        personaDAO = new PersonaServicio();
        costoDAO = new CostoServicio();
        valoresIniciales();
    }

    /**
     *
     * Devuelve la fecha actual en formato "dd/MM/yyyy".
     *
     * @return la fecha actual en formato "dd/MM/yyyy".
     */
    private String fecha() {
        LocalDate fechaActual = LocalDate.now();

        // Crear un formateador de fecha con el formato "dd/MM/yyyy"
        DateTimeFormatter formateador = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Formatear la fecha en una cadena utilizando el formateador
        String fechaFormateada = fechaActual.format(formateador);
        return fechaFormateada;
    }

    /**
     *
     * Configura los valores iniciales de la ventana. Establece la fecha actual
     * en el label lblFecha, e inserta los costos y personas iniciales.
     */
    private void valoresIniciales() {
        this.lblFecha.setText(fecha());
        this.insertarCostos();
        this.insertarPersonas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        panelInicio = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblItson = new javax.swing.JLabel();
        lblAgencia = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuSistema = new javax.swing.JMenu();
        menuItemSalir = new javax.swing.JMenuItem();
        menuTramites = new javax.swing.JMenu();
        menuItemTramiteLicencia = new javax.swing.JMenuItem();
        menuTramitesPlacas = new javax.swing.JMenu();
        menuItemPlacasNueva = new javax.swing.JMenuItem();
        menuItemPlacasCambiar = new javax.swing.JMenuItem();
        menuConsulta = new javax.swing.JMenu();
        menuItemConsultaTramites = new javax.swing.JMenuItem();
        menuItemConsultaReporte = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuItemSobreNosotros = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Principal");
        setResizable(false);

        panelInicio.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 102, 255));

        lblItson.setFont(new java.awt.Font("Impact", 1, 24)); // NOI18N
        lblItson.setForeground(new java.awt.Color(255, 255, 255));
        lblItson.setText("ITSON");

        lblAgencia.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        lblAgencia.setForeground(new java.awt.Color(255, 255, 255));
        lblAgencia.setText("Agencia de Tránsito");

        lblFecha.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(255, 255, 255));
        lblFecha.setText("dd/mm/aaaa");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblItson)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblAgencia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 332, Short.MAX_VALUE)
                        .addComponent(lblFecha)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblItson)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAgencia)
                    .addComponent(lblFecha))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelInicioLayout = new javax.swing.GroupLayout(panelInicio);
        panelInicio.setLayout(panelInicioLayout);
        panelInicioLayout.setHorizontalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelInicioLayout.setVerticalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 317, Short.MAX_VALUE))
        );

        desktopPane.add(panelInicio);
        panelInicio.setBounds(0, 0, 580, 390);

        menuBar.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N

        menuSistema.setMnemonic('f');
        menuSistema.setText("Sistema");

        menuItemSalir.setMnemonic('x');
        menuItemSalir.setText("Salir");
        menuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSalirActionPerformed(evt);
            }
        });
        menuSistema.add(menuItemSalir);

        menuBar.add(menuSistema);

        menuTramites.setMnemonic('e');
        menuTramites.setText("Trámites");
        menuTramites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTramitesActionPerformed(evt);
            }
        });

        menuItemTramiteLicencia.setText("Licencia");
        menuItemTramiteLicencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTramiteLicenciaActionPerformed(evt);
            }
        });
        menuTramites.add(menuItemTramiteLicencia);

        menuTramitesPlacas.setText("Placas");

        menuItemPlacasNueva.setText("Nueva");
        menuItemPlacasNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPlacasNuevaActionPerformed(evt);
            }
        });
        menuTramitesPlacas.add(menuItemPlacasNueva);

        menuItemPlacasCambiar.setText("Cambiar");
        menuItemPlacasCambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPlacasCambiarActionPerformed(evt);
            }
        });
        menuTramitesPlacas.add(menuItemPlacasCambiar);

        menuTramites.add(menuTramitesPlacas);

        menuBar.add(menuTramites);

        menuConsulta.setText("Consulta");

        menuItemConsultaTramites.setText("Trámite");
        menuItemConsultaTramites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemConsultaTramitesActionPerformed(evt);
            }
        });
        menuConsulta.add(menuItemConsultaTramites);

        menuItemConsultaReporte.setText("Reporte pdf");
        menuItemConsultaReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemConsultaReporteActionPerformed(evt);
            }
        });
        menuConsulta.add(menuItemConsultaReporte);

        menuBar.add(menuConsulta);

        menuAyuda.setMnemonic('h');
        menuAyuda.setText("Ayuda");

        menuItemSobreNosotros.setMnemonic('a');
        menuItemSobreNosotros.setText("Sobre Nosotros");
        menuItemSobreNosotros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSobreNosotrosActionPerformed(evt);
            }
        });
        menuAyuda.add(menuItemSobreNosotros);

        menuBar.add(menuAyuda);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * Maneja la acción del menú "Salir". Pregunta al usuario si realmente desea
     * salir del sistema y, si es así, termina la ejecución de la aplicación.
     *
     * @param evt Evento de acción que activa este método.
     */
    private void menuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSalirActionPerformed
        int salir = JOptionPane.showConfirmDialog(this, "¿Segur(a) que desea salir\n"
                + "del sistema?", "¡Precaucion!", JOptionPane.YES_NO_OPTION);
        if (salir == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_menuItemSalirActionPerformed

    /**
     *
     * Maneja la acción del menú "Sobre Nosotros". Muestra la ventana modal
     * "NosotrosDlg".
     *
     * @param evt Evento de acción que activa este método.
     */
    private void menuItemSobreNosotrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSobreNosotrosActionPerformed
        NosotrosDlg nosotros = new NosotrosDlg(this, true);
        nosotros.setVisible(true);
    }//GEN-LAST:event_menuItemSobreNosotrosActionPerformed

    /**
     *
     * Maneja la acción del menú "Trámite Licencia". Crea una instancia de la
     * clase TramiteLicenciaForm y muestra la ventana, cerrando la ventana
     * actual.
     *
     * @param evt Evento de acción que activa este método.
     */
    private void menuItemTramiteLicenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTramiteLicenciaActionPerformed
        TramiteLicenciaForm tramiteLicencia = new TramiteLicenciaForm();
        this.dispose();
        tramiteLicencia.setVisible(true);
    }//GEN-LAST:event_menuItemTramiteLicenciaActionPerformed

    private void menuTramitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTramitesActionPerformed

    }//GEN-LAST:event_menuTramitesActionPerformed

    private void menuItemTramitePlacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTramitePlacaActionPerformed

    }//GEN-LAST:event_menuItemTramitePlacaActionPerformed

    /**
     *
     * Abre la ventana de consulta de trámites al hacer clic en el menú
     * "Consulta de Trámites". Se cierra la ventana actual.
     *
     * @param evt El evento que se genera al hacer clic en el menú.
     */
    private void menuItemConsultaTramitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemConsultaTramitesActionPerformed
        // TODO add your handling code here:
        ConsultaForm consultarTramites = new ConsultaForm();
        this.dispose();
        consultarTramites.setVisible(true);
    }//GEN-LAST:event_menuItemConsultaTramitesActionPerformed

    /**
     *
     * Este método se ejecuta al hacer clic en el botón "Nueva placa" del menú
     * principal y muestra el formulario para registrar un nuevo vehículo.
     */
    private void menuItemPlacasNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPlacasNuevaActionPerformed
        RegistrarVehiculoForm nuevoAuto = new RegistrarVehiculoForm();
        this.dispose();
        nuevoAuto.setVisible(true);
    }//GEN-LAST:event_menuItemPlacasNuevaActionPerformed

    /**
     *
     * Este método se ejecuta al hacer clic en el botón "Cambiar placa" del menú
     * principal y muestra el formulario para buscar un vehículo y cambiar sus
     * placas.
     */
    private void menuItemPlacasCambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPlacasCambiarActionPerformed
        // TODO add your handling code here:
        BuscadorAutomovilesForm buscarAutomovil = new BuscadorAutomovilesForm();
        // ActualizarPlacasForm actualizarPlaca = new ActualizarPlacasForm();
        this.dispose();
        // actualizarPlaca.setVisible(true);
        buscarAutomovil.setVisible(true);
    }//GEN-LAST:event_menuItemPlacasCambiarActionPerformed

    /**
     *
     * Este método se ejecuta al hacer clic en el botón "Consulta de reporte"
     * del menú principal y muestra el formulario para generar un reporte PDF.
     */
    private void menuItemConsultaReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemConsultaReporteActionPerformed
        new GenerarReportePdfForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuItemConsultaReporteActionPerformed

    /**
     * Ingresa respectivamente los costos
     */
    private void insertarCostos() {
        boolean validarCostos = costoDAO.consultarCostos().isEmpty();
        if (validarCostos) {
            Costo licencia1 = new CostoLicencia("1 año", 200, 600);
            Costo licencia2 = new CostoLicencia("2 años", 500, 900);
            Costo licencia3 = new CostoLicencia("3 años", 700, 1100);
            costoDAO.agregarCosto(licencia1);
            costoDAO.agregarCosto(licencia2);
            costoDAO.agregarCosto(licencia3);

            Costo placa1 = new CostoPlaca(TipoVehiculo.NUEVO, 1500);
            Costo placa2 = new CostoPlaca(TipoVehiculo.USADO, 1000);
            costoDAO.agregarCosto(placa1);
            costoDAO.agregarCosto(placa2);
            JOptionPane.showMessageDialog(null, "Registro masivo de costos exitoso");
        }
    }

    /**
     * Método que crea 20 objetos de tipo Persona
     *
     * @return Lista de objetos de tipo Persona
     */
    private List<Persona> crearPersonas() {
        List<Persona> listaPersonas = new LinkedList<>();
        Persona persona1 = new Persona("Juan", "Pérez", "García", "PERJ820215LW8", null, false, "5551234567");
        listaPersonas.add(persona1);
        Persona persona2 = new Persona("María", "González", "López", "GOLM840912VY3", null, true, "5552345678");
        listaPersonas.add(persona2);
        Persona persona3 = new Persona("José", "Hernández", "Méndez", "HEME780324EY1", null, false, "5553456789");
        listaPersonas.add(persona3);
        Persona persona4 = new Persona("Ana", "Martínez", "Ramírez", "MARA790603GT5", null, true, "5554567890");
        listaPersonas.add(persona4);
        Persona persona5 = new Persona("Pedro", "Sánchez", "Ruiz", "SARP811212LZ9", null, false, "5555678901");
        listaPersonas.add(persona5);
        Persona persona6 = new Persona("Lucía", "Flores", "Gómez", "FLOG790510DS2", null, true, "5556789012");
        listaPersonas.add(persona6);
        Persona persona7 = new Persona("Miguel", "Castillo", "Cortés", "CASD811001MY4", null, false, "5557890123");
        listaPersonas.add(persona7);
        Persona persona8 = new Persona("Sofía", "Rivera", "Vega", "RIVS830511PA6", null, true, "5558901234");
        listaPersonas.add(persona8);
        Persona persona9 = new Persona("Carlos", "Gutiérrez", "Díaz", "GUDC800802KL7", null, false, "5559012345");
        listaPersonas.add(persona9);
        Persona persona10 = new Persona("Laura", "Álvarez", "García", "ALGL820423FH9", null, true, "5550123456");
        listaPersonas.add(persona10);
        Persona persona11 = new Persona("Fernando", "Pérez", "López", "PERF800709WU8", null, false, "5551234567");
        listaPersonas.add(persona11);
        Persona persona12 = new Persona("Paula", "Sánchez", "Méndez", "SAMM840313SG1", null, true, "5552345678");
        listaPersonas.add(persona12);
        Persona persona13 = new Persona("Gustavo", "García", "Ramírez", "GARR810708CT3", null, false, "5553456789");
        listaPersonas.add(persona13);
        Persona persona14 = new Persona("Luisa", "Flores", "Ruiz", "FLRL830928BG5", null, true, "5554567890");
        listaPersonas.add(persona14);
        Persona persona15 = new Persona("Arturo", "Castillo", "Gómez", "CASG790205XQ2", null, false, "5555678901");
        listaPersonas.add(persona15);
        Persona persona16 = new Persona("Carmen", "Rivera", "Cortés", "RIVC810402DH4", null, true, "5556789012");
        listaPersonas.add(persona16);
        Persona persona17 = new Persona("Diego", "Gutiérrez", "Vega", "GUDV800118NP0", null, false, "5557890123");
        listaPersonas.add(persona17);
        Persona persona18 = new Persona("Elena", "Álvarez", "Díaz", "ALDE810606LU6", null, true, "5558901234");
        listaPersonas.add(persona18);
        Persona persona19 = new Persona("Felipe", "Pérez", "García", "PERF820426CE7", null, false, "5559012345");
        listaPersonas.add(persona19);
        Persona persona20 = new Persona("Gabriela", "García", "González", "GARG900303", null, true, "6441942558");
        listaPersonas.add(persona20);
        return listaPersonas;
    }

    /**
     * Método que crea 20 objetos de tipo Calendar para crear 20 fechas de
     * nacimiento
     *
     * @return Lista de 20 objetos de tipo Calendar
     */
    private List<Calendar> crearFechaNacimiento() {
        List<Calendar> listaFechasNacimiento = new LinkedList<>();
        Calendar fechaNacimiento1 = new GregorianCalendar(2000, 2, 15);
        listaFechasNacimiento.add(fechaNacimiento1);
        Calendar fechaNacimiento2 = new GregorianCalendar(2002, 10, 15);
        listaFechasNacimiento.add(fechaNacimiento2);
        Calendar fechaNacimiento3 = new GregorianCalendar(2004, 4, 2);
        listaFechasNacimiento.add(fechaNacimiento3);
        Calendar fechaNacimiento4 = new GregorianCalendar(2001, 8, 7);
        listaFechasNacimiento.add(fechaNacimiento4);
        Calendar fechaNacimiento5 = new GregorianCalendar(2005, 6, 21);
        listaFechasNacimiento.add(fechaNacimiento5);
        Calendar fechaNacimiento6 = new GregorianCalendar(2003, 12, 11);
        listaFechasNacimiento.add(fechaNacimiento6);
        Calendar fechaNacimiento7 = new GregorianCalendar(2000, 1, 3);
        listaFechasNacimiento.add(fechaNacimiento7);
        Calendar fechaNacimiento8 = new GregorianCalendar(2002, 5, 29);
        listaFechasNacimiento.add(fechaNacimiento8);
        Calendar fechaNacimiento9 = new GregorianCalendar(2004, 9, 18);
        listaFechasNacimiento.add(fechaNacimiento9);
        Calendar fechaNacimiento10 = new GregorianCalendar(2001, 11, 6);
        listaFechasNacimiento.add(fechaNacimiento10);
        Calendar fechaNacimiento11 = new GregorianCalendar(2005, 7, 9);
        listaFechasNacimiento.add(fechaNacimiento11);
        Calendar fechaNacimiento12 = new GregorianCalendar(2003, 2, 28);
        listaFechasNacimiento.add(fechaNacimiento12);
        Calendar fechaNacimiento13 = new GregorianCalendar(2000, 4, 14);
        listaFechasNacimiento.add(fechaNacimiento13);
        Calendar fechaNacimiento14 = new GregorianCalendar(2002, 1, 25);
        listaFechasNacimiento.add(fechaNacimiento14);
        Calendar fechaNacimiento15 = new GregorianCalendar(2004, 11, 27);
        listaFechasNacimiento.add(fechaNacimiento15);
        Calendar fechaNacimiento16 = new GregorianCalendar(2001, 3, 31);
        listaFechasNacimiento.add(fechaNacimiento16);
        Calendar fechaNacimiento17 = new GregorianCalendar(2005, 9, 2);
        listaFechasNacimiento.add(fechaNacimiento17);
        Calendar fechaNacimiento18 = new GregorianCalendar(2003, 6, 8);
        listaFechasNacimiento.add(fechaNacimiento18);
        Calendar fechaNacimiento19 = new GregorianCalendar(2000, 12, 12);
        listaFechasNacimiento.add(fechaNacimiento19);
        Calendar fechaNacimiento20 = new GregorianCalendar(2002, 7, 4);
        listaFechasNacimiento.add(fechaNacimiento20);
        return listaFechasNacimiento;
    }

    /**
     * Método que le asigna a una lista de personas sin fecha de nacimiento una
     * fecha de nacimiento con otra lista de tipo Calendar
     *
     * @return Lista de objetos de tipo Persona con fecha de nacimiento
     */
    private List<Persona> asignarFechaNacimientoToPersona() {

        List<Persona> listaPersonas = crearPersonas();
        List<Calendar> listaFechasNacimiento = crearFechaNacimiento();

        for (int i = 0; i < listaPersonas.size(); i++) {
            Persona persona = listaPersonas.get(i);
            Calendar fechaNacimiento = listaFechasNacimiento.get(i);
            persona.setFechaNacimiento(fechaNacimiento);
        }
        return listaPersonas;
    }

    /**
     * Inserta de manera masiva 20 personas a la base de datos
     */
    private void insertarPersonas() {
        boolean validarPersonas = personaDAO.consultarPersonas().isEmpty();
        if (validarPersonas) {
            List<Persona> listaPersonas = asignarFechaNacimientoToPersona();
            for (Persona persona : listaPersonas) {
                personaDAO.agregarPersona(persona);

            }
            JOptionPane.showMessageDialog(null, "Registro masivo de personas exitoso");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblAgencia;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblItson;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuConsulta;
    private javax.swing.JMenuItem menuItemConsultaReporte;
    private javax.swing.JMenuItem menuItemConsultaTramites;
    private javax.swing.JMenuItem menuItemPlacasCambiar;
    private javax.swing.JMenuItem menuItemPlacasNueva;
    private javax.swing.JMenuItem menuItemSalir;
    private javax.swing.JMenuItem menuItemSobreNosotros;
    private javax.swing.JMenuItem menuItemTramiteLicencia;
    private javax.swing.JMenu menuSistema;
    private javax.swing.JMenu menuTramites;
    private javax.swing.JMenu menuTramitesPlacas;
    private javax.swing.JPanel panelInicio;
    // End of variables declaration//GEN-END:variables

}
